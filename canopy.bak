#ifndef CANOPY_H
#define CANOPY_H

#include <stdbool.h>
#include <stdlib.h>

#include "common.h"

typedef int WINDOW_STYLE_FLAGS;

enum {
        WindowStyleMaskBorderless = 0,
        WindowStyleMaskTitled = 1 << 0,
        WindowStyleMaskClosable = 1 << 1,
        WindowStyleMaskMiniaturizable = 1 << 2,
        WindowStyleMaskResizable = 1 << 3,
        WindowStyleMaskUnifiedTitleAndToolbar = 1 << 12,
        WindowStyleMaskFullScreen = 1 << 14,
        WindowStyleMaskFullSizeContentView = 1 << 15,
        WindowStyleMaskUtilityWindow = 1 << 4,
        WindowStyleMaskModalWindow = 1 << 6,
        WindowStyleMaskNonactivatingPanel = 1 << 7,
        WindowStyleMaskHUDWindow  = 1 << 13,
        WindowStyleDefault = 15
};
/* Safe wrappers */
void *canopy_calloc(size_t count, size_t size);
void canopy_free(void *ptr);
void *canopy_malloc(size_t size);
void *canopy_realloc(void *ptr, size_t size);

/* This is a forward declaration — I'm saying:

    “Hey compiler, canopy_window is a struct that exists somewhere.
    I don’t need to know what it looks like yet — just that it exists.”

    This allows:
        * Declaring pointers to it (canopy_window*)
        * Passing it around
        * Returning it from functions

    But you cannot dereference it, access members, or allocate it
    directly (you don’t know its size!).
*/
typedef struct canopy_window    canopy_window;
typedef struct canopy_cursor    canopy_cursor;
typedef struct canopy_image     canopy_image;

/* Basic windowing */
canopy_window *canopy_create_window(int width,
        int height,
        const char *title
        /*monitor*/
        /*window *share*/);
void        canopy_free_window(canopy_window *window);
bool        canopy_window_should_close(canopy_window *window);
void        canopy_set_window_should_close(canopy_window *window, int value);
const char* canopy_get_window_title(canopy_window *window);
void        canopy_set_window_title(canopy_window *window, const char* title);
void        canopy_get_window_pos(canopy_window *window, int *pos_x, int *pos_y);
void        canopy_set_window_pos(canopy_window *window, int pos_x, int pos_y);

/* Events */
void        canopy_poll_events(void);
const char* canopy_get_key_name(int key, int scancode);
int         canopy_get_key_scancode(int key);
int         canopy_get_key(canopy_window *window, int key);
int         canopy_get_mouse_button(canopy_window *window, int button);
void        canopy_get_cursor_pos(canopy_window *window, double *pos_x, double *pos_y);
void        canopy_set_cursor_pos(canopy_window *window, double pos_x, double pos_y);
canopy_cursor *canopy_create_cursor(int shape);
void        canopy_free_cursor(canopy_cursor *cursor);
void        canopy_set_cursor(canopy_window *window, canopy_cursor *cursor);

#endif // CANOPY_H

